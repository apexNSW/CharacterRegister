#define SHIFT_DATA 2
#define SHIFT_CLK 3
#define SHIFT_LATCH 4
#define WRITE_ENABLE 13
#define EEPROM_D0 5
#define EEPROM_D1 6
#define EEPROM_D2 7
#define EEPROM_D3 8
#define EEPROM_D4 9
#define EEPROM_D5 10
#define EEPROM_D6 11
#define EEPROM_D7 12

#define R0 0x000
#define R1 0x100
#define R2 0x200
#define R3 0x300
#define R4 0x400
#define R5 0x500
#define R6 0x600
#define R7 0x700

word rows[] = {
  R0,
  R1,
  R2,
  R3,
  R4,
  R5,
  R6,
  R7  
};

byte hexCharacters[][9] = {
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, //null
  {0x05,0x00,0x7c,0x82,0x82,0x82,0x44,0xaa,0xee}, //Ω
  {0x06,0x00,0x00,0x00,0x6c,0x92,0x6c,0x00,0x00}, //∞
  {0x07,0x00,0x00,0x00,0x02,0x7c,0xa8,0x28,0x28}, //π
  {0x08,0x00,0x00,0x42,0x42,0x42,0x46,0xba,0x80}, //µ
  {0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, //tab
  {0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, //space
  {0x21,0x00,0x40,0x40,0x40,0x40,0x00,0x00,0x40}, //!
  {0x22,0x00,0x24,0x24,0x24,0x00,0x00,0x00,0x00}, //"
  {0x23,0x00,0x24,0x24,0x7e,0x24,0x7e,0x24,0x24}, //#
  {0x24,0x00,0x08,0x1e,0x28,0x1c,0x0a,0x3c,0x08}, //$
  {0x25,0x00,0x00,0x62,0x64,0x08,0x10,0x26,0x46}, //%
  {0x26,0x00,0x30,0x48,0x48,0x30,0x4a,0x44,0x3a}, //&
  {0x27,0x00,0x10,0x21,0x40,0x00,0x00,0x00,0x00}, //'
  {0x28,0x00,0x08,0x10,0x20,0x20,0x20,0x10,0x08}, //(
  {0x29,0x00,0x40,0x20,0x10,0x10,0x10,0x20,0x40}, //)
  {0x2a,0x00,0x10,0x54,0x38,0x7c,0x38,0x54,0x10}, //*
  {0x2b,0x00,0x00,0x10,0x10,0x7c,0x10,0x10,0x00}, //+
  {0x2c,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x80}, //,
  {0x2d,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00}, //-
  {0x2e,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60}, //.
  {0x2f,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x00}, //forward slash (/)
  {0x30,0x00,0x3c,0x42,0x46,0x5a,0x62,0x42,0x3c}, //0
  {0x31,0x00,0x08,0x18,0x28,0x08,0x08,0x08,0x3e}, //1
  {0x32,0x00,0x3c,0x42,0x02,0x0c,0x30,0x40,0x7e}, //2
  {0x33,0x00,0x3c,0x42,0x02,0x1c,0x02,0x42,0x3c}, //3
  {0x34,0x00,0x04,0x0c,0x14,0x24,0x7e,0x04,0x04}, //4
  {0x35,0x00,0x7e,0x40,0x78,0x04,0x02,0x44,0x38}, //5
  {0x36,0x00,0x1c,0x20,0x40,0x7c,0x42,0x42,0x3c}, //6
  {0x37,0x00,0x7e,0x42,0x04,0x08,0x10,0x10,0x10}, //7
  {0x38,0x00,0x3c,0x42,0x42,0x3c,0x42,0x42,0x3c}, //8
  {0x39,0x00,0x3c,0x42,0x42,0x3e,0x02,0x04,0x38}, //9
  {0x3a,0x00,0x00,0x20,0x00,0x00,0x20,0x00,0x00}, //:
  {0x3b,0x00,0x00,0x10,0x00,0x00,0x10,0x10,0x20}, //;
  {0x3c,0x00,0x0e,0x18,0x30,0x60,0x30,0x18,0x0e}, //<
  {0x3d,0x00,0x00,0x00,0x7e,0x00,0x7e,0x00,0x00}, //=
  {0x3e,0x00,0x70,0x18,0x0c,0x06,0x0c,0x18,0x70}, //>
  {0x3f,0x00,0x3c,0x42,0x02,0x0c,0x10,0x00,0x10}, //?
  {0x40,0x00,0x1c,0x22,0x4a,0x56,0x4c,0x20,0x1e}, //@
  {0x41,0x00,0x18,0x24,0x42,0x7e,0x42,0x42,0x42}, //A
  {0x42,0x00,0x7c,0x22,0x22,0x3c,0x22,0x22,0x7c}, //B
  {0x43,0x00,0x1c,0x22,0x40,0x40,0x40,0x22,0x1c}, //C
  {0x44,0x00,0x78,0x24,0x22,0x22,0x22,0x24,0x78}, //D
  {0x45,0x00,0x7e,0x40,0x40,0x78,0x40,0x40,0x7e}, //E
  {0x46,0x00,0x7e,0x40,0x40,0x78,0x40,0x40,0x40}, //F
  {0x47,0x00,0x1c,0x22,0x40,0x4e,0x42,0x22,0x1c}, //G
  {0x48,0x00,0x42,0x42,0x42,0x7e,0x42,0x42,0x42}, //H
  {0x49,0x00,0x38,0x10,0x10,0x10,0x10,0x10,0x38}, //I
  {0x4a,0x00,0x0e,0x04,0x04,0x04,0x04,0x44,0x38}, //J
  {0x4b,0x00,0x42,0x44,0x48,0x70,0x48,0x44,0x42}, //K
  {0x4c,0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x7e}, //L
  {0x4d,0x00,0x42,0x66,0x5a,0x5a,0x42,0x42,0x42}, //M
  {0x4e,0x00,0x42,0x62,0x52,0x4a,0x46,0x42,0x42}, //N
  {0x4f,0x00,0x18,0x24,0x42,0x42,0x42,0x24,0x18}, //O
  {0x50,0x00,0x7c,0x42,0x42,0x7c,0x40,0x40,0x40}, //P
  {0x51,0x00,0x18,0x24,0x42,0x42,0x4a,0x24,0x1a}, //Q
  {0x52,0x00,0x7c,0x42,0x42,0x7c,0x48,0x44,0x42}, //R
  {0x53,0x00,0x3c,0x42,0x40,0x3c,0x02,0x42,0x3c}, //S
  {0x54,0x00,0x7c,0x10,0x10,0x10,0x10,0x10,0x10}, //T
  {0x55,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x3c}, //U
  {0x56,0x00,0x42,0x42,0x42,0x24,0x24,0x18,0x18}, //V
  {0x57,0x00,0x42,0x42,0x42,0x5a,0x5a,0x66,0x42}, //W
  {0x58,0x00,0x42,0x42,0x24,0x18,0x24,0x42,0x42}, //X
  {0x59,0x00,0x44,0x44,0x44,0x38,0x10,0x10,0x10}, //Y
  {0x5a,0x00,0x7e,0x02,0x04,0x18,0x20,0x40,0x7e}, //Z
  {0x5b,0x00,0x3c,0x20,0x20,0x20,0x20,0x20,0x3c}, //[
  {0x5c,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x01}, //backslash (\)
  {0x5d,0x00,0x3c,0x04,0x04,0x04,0x04,0x04,0x3c}, //]
  {0x5e,0x00,0x08,0x14,0x22,0x00,0x00,0x00,0x00}, //^
  {0x5f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff}, //_
  {0x60,0x00,0x20,0x10,0x08,0x00,0x00,0x00,0x00}, //`
  {0x61,0x00,0x00,0x00,0x38,0x04,0x3c,0x44,0x3a}, //a
  {0x62,0x00,0x40,0x40,0x5c,0x62,0x42,0x62,0x5c}, //b
  {0x63,0x00,0x00,0x00,0x3c,0x42,0x40,0x42,0x3c}, //c
  {0x64,0x00,0x02,0x02,0x3a,0x46,0x42,0x46,0x3a}, //d
  {0x65,0x00,0x00,0x00,0x3c,0x42,0x7e,0x40,0x3c}, //e
  {0x66,0x00,0x0c,0x12,0x10,0x7c,0x10,0x10,0x10}, //f
  {0x67,0x00,0x00,0x3a,0x46,0x46,0x3a,0x02,0x3c}, //g
  {0x68,0x00,0x40,0x40,0x5c,0x62,0x42,0x42,0x42}, //h
  {0x69,0x00,0x08,0x00,0x18,0x08,0x08,0x08,0x1c}, //i
  {0x6a,0x04,0x00,0x0c,0x04,0x04,0x04,0x44,0x38}, //j
  {0x6b,0x00,0x40,0x40,0x44,0x48,0x50,0x68,0x44}, //k
  {0x6c,0x00,0x18,0x08,0x08,0x08,0x08,0x08,0x1c}, //l
  {0x6d,0x00,0x00,0x00,0x76,0x49,0x49,0x49,0x49}, //m
  {0x6e,0x00,0x00,0x00,0x5c,0x62,0x42,0x42,0x42}, //n
  {0x6f,0x00,0x00,0x00,0x3c,0x42,0x42,0x42,0x3c}, //o
  {0x70,0x00,0x40,0x5c,0x62,0x62,0x5c,0x40,0x40}, //p
  {0x71,0x00,0x00,0x3a,0x46,0x46,0x3a,0x02,0x02}, //q
  {0x72,0x00,0x00,0x00,0x5c,0x62,0x40,0x40,0x40}, //r
  {0x73,0x00,0x00,0x00,0x3e,0x40,0x3c,0x02,0x7c}, //s
  {0x74,0x00,0x10,0x10,0x7c,0x10,0x10,0x12,0x0c}, //t
  {0x75,0x00,0x00,0x00,0x42,0x42,0x42,0x46,0x3a}, //u
  {0x76,0x00,0x00,0x00,0x42,0x42,0x42,0x24,0x18}, //v
  {0x77,0x00,0x00,0x00,0x41,0x49,0x49,0x49,0x36}, //w
  {0x78,0x00,0x00,0x00,0x42,0x24,0x18,0x24,0x42}, //x
  {0x79,0x00,0x00,0x42,0x42,0x46,0x3a,0x02,0x3c}, //y
  {0x7a,0x00,0x00,0x00,0x7e,0x04,0x18,0x20,0x7e}, //z
  {0x7b,0x00,0x06,0x08,0x08,0x30,0x08,0x08,0x06}, //{
  {0x7c,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08}, //|
  {0x7d,0x00,0x60,0x10,0x10,0x0c,0x10,0x10,0x60}, //}
  {0x7e,0x00,0x62,0x92,0x8c,0x00,0x00,0x00,0x00}, //~
  {0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}  //blank
};

int DATAMODE = 0;//1 for read (0 for write)

void setup() {
  pinMode(SHIFT_DATA,OUTPUT);
  pinMode(SHIFT_CLK,OUTPUT);
  pinMode(SHIFT_LATCH,OUTPUT);
  digitalWrite(WRITE_ENABLE,HIGH);
  pinMode(WRITE_ENABLE,OUTPUT);
  dataPinsOff();
  pinsWrite(true);
  Serial.begin(9600);
  //eraseEEPROM(0);  //erase all data from the EEPROM
  progChars(); //program all characters from hexCharacters array
  delay(1000);
  readEEPROM(0); //read EEPROM
}
void loop() {

}
void progChars() {
  for(int i=0; i<(sizeof(hexCharacters)/sizeof(hexCharacters[0]));i++) {
    for(int j=0; j<8;j++) {
      word address = hexCharacters[i][0] | rows[j];
      writeData(hexCharacters[i][j+1],address);
    }
  }
  Serial.print("EEPROM programmed.");
}
void eraseEEPROM(bool val) {
  byte data;
  if (val) {
    data = 0xff;
  } else {
    data = 0x00;
  }
  for(int i = 0; i<2048; i++) {
    writeData(data,i);
  }
  Serial.println("EEPROM Erased.");
  
}
void readEEPROM(int startaddress) {
  int endaddress = startaddress+255;
  for(int base = startaddress; base <= endaddress; base += 16) {
    byte data[16];
    for(int offset = 0; offset <=15; offset +=1) {
      data[offset] = readData(base+offset);
    }
    char buf[80];
    sprintf(buf,"%03x: %02x %02x %02x %02x %02x %02x %02x %02x  %02x %02x %02x %02x %02x %02x %02x %02x",
      base, data[0], data[1], data[2], data[3], data[4], data[5],
      data[6], data[7], data[8], data[9], data[10], data[11], data[12],
      data[13], data[14], data[15]
    );
    Serial.println(buf);
  }
}
byte readData(word address) {
  pinsRead();
  set_register(address,true);
  byte data = 0;
  int ct = 0;
  for(int pin=EEPROM_D0;pin<=EEPROM_D7;pin++) {
    bitWrite(data, ct, digitalRead(pin));
    ct++;
  }
  return data;
}
void writeData(byte data, word address) {
  pinsWrite();
  set_register(address,false);
  int ct = 0;
  for(int pin=EEPROM_D7;pin>=EEPROM_D0;pin--) {
     digitalWrite(pin,bitRead(data,ct));
     ct++;
  }
  /*
  for(int pin=EEPROM_D0;pin<=EEPROM_D7;pin++) {
     digitalWrite(pin,bitRead(data,ct));
     ct++;
  }
  */
  writePulse();
}
void writePulse() {
  digitalWrite(WRITE_ENABLE,LOW);
  delayMicroseconds(1);
  digitalWrite(WRITE_ENABLE,HIGH);
  delay(10);
  dataPinsOff();
}
void dataPinsOff() {
  if (DATAMODE == 0) {
    for(int pin=EEPROM_D0;pin<=EEPROM_D7;pin++) {
      digitalWrite(pin,LOW);
    }
  }
}
void set_register(word address, bool outputEnable) {
  byte left = highByte(address);
  byte right = lowByte(address);
  if (outputEnable) {
    bitClear(left,7);
  } else {
    bitSet(left,7);
  }
  shiftOut(SHIFT_DATA,SHIFT_CLK,MSBFIRST,left);
  shiftOut(SHIFT_DATA,SHIFT_CLK,MSBFIRST,right);
  latch();
}
void pinsRead(bool init) {
  int proceed = 0;
  if (init) {
    proceed = 1;
  } else {
    if (DATAMODE == 0) {
      proceed = 1;
    }
  }
  if (proceed) {
    for(int pin=EEPROM_D0;pin<=EEPROM_D7;pin++) {
      pinMode(pin,INPUT);
    }
    DATAMODE = 1;
  }
}
void pinsWrite(bool init) {
  int proceed = 0;
  if (init) {
    proceed = 1;
  } else {
    if (DATAMODE == 1) {
      proceed = 1;
    }
  }
  if (proceed) {
    for(int pin=EEPROM_D0;pin<=EEPROM_D7;pin++) {
      pinMode(pin,OUTPUT);
    }
    DATAMODE = 0;
  }
}
void pinsWrite() {
  pinsWrite(false);
}
void pinsRead() {
  pinsRead(false);
}
void latch() {
  digitalWrite(SHIFT_LATCH,LOW);
  digitalWrite(SHIFT_LATCH,HIGH);
  digitalWrite(SHIFT_LATCH,LOW);
}
